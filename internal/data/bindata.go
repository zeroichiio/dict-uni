// Code generated by go-bindata.
// sources:
// dict/unidict.aa
// dict/unidict.ab
// dict/unidict.ac
// dict/unidict.ad
// dict/unidict.ae
// dict/unidict.af
// dict/unidict.ag
// dict/unidict.ah
// dict/unidict.ai
// dict/unidict.aj
// dict/unidict.ak
// dict/unidict.al
// dict/unidict.am
// dict/unidict.an
// dict/unidict.ao
// dict/unidict.ap
// dict/unidict.aq
// dict/unidict.ar
// dict/unidict.as
// dict/unidict.at
// dict/unidict.au
// dict/unidict.av
// dict/unidict.aw
// dict/unidict.ax
// dict/unidict.ay
// dict/unidict.az
// dict/unidict.ba
// dict/unidict.bb
// dict/unidict.bc
// dict/unidict.bd
// dict/unidict.be
// dict/unidict.bf
// dict/unidict.bg
// dict/unidict.bh
// dict/unidict.bi
// dict/unidict.bj
// dict/unidict.bk
// dict/unidict.bl
// dict/unidict.bm
// dict/unidict.bn
// dict/unidict.bo
// dict/unidict.bp
// dict/unidict.bq
// dict/unidict.br
// dict/unidict.bs
// dict/unidict.bt
// dict/unidict.bu
// dict/unidict.bv
// dict/unidict.bw
// dict/unidict.bx
// dict/unidict.by
// dict/unidict.bz
// dict/unidict.ca
// dict/unidict.cb
// dict/unidict.cc
// dict/unidict.cd
// dict/unidict.ce
// dict/unidict.cf
// dict/unidict.cg
// dict/unidict.ch
// dict/unidict.ci
// dict/unidict.cj
// dict/unidict.ck
// dict/unidict.cl
// dict/unidict.cm
// dict/unidict.cn
// dict/unidict.co
// dict/unidict.cp
// dict/unidict.cq
// dict/unidict.cr
// dict/unidict.cs
// dict/unidict.ct
// dict/unidict.cu
// dict/unidict.cv
// dict/unidict.cw
// dict/unidict.cx
// dict/unidict.cy
// dict/unidict.cz
// dict/unidict.da
// dict/unidict.db
// dict/unidict.dc
// dict/unidict.dd
// dict/unidict.de
// dict/unidict.df
// dict/unidict.dg
// dict/unidict.dh
// dict/unidict.di
// DO NOT EDIT!

package data

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dict/unidict.aa": dictUnidictAa,
	"dict/unidict.ab": dictUnidictAb,
	"dict/unidict.ac": dictUnidictAc,
	"dict/unidict.ad": dictUnidictAd,
	"dict/unidict.ae": dictUnidictAe,
	"dict/unidict.af": dictUnidictAf,
	"dict/unidict.ag": dictUnidictAg,
	"dict/unidict.ah": dictUnidictAh,
	"dict/unidict.ai": dictUnidictAi,
	"dict/unidict.aj": dictUnidictAj,
	"dict/unidict.ak": dictUnidictAk,
	"dict/unidict.al": dictUnidictAl,
	"dict/unidict.am": dictUnidictAm,
	"dict/unidict.an": dictUnidictAn,
	"dict/unidict.ao": dictUnidictAo,
	"dict/unidict.ap": dictUnidictAp,
	"dict/unidict.aq": dictUnidictAq,
	"dict/unidict.ar": dictUnidictAr,
	"dict/unidict.as": dictUnidictAs,
	"dict/unidict.at": dictUnidictAt,
	"dict/unidict.au": dictUnidictAu,
	"dict/unidict.av": dictUnidictAv,
	"dict/unidict.aw": dictUnidictAw,
	"dict/unidict.ax": dictUnidictAx,
	"dict/unidict.ay": dictUnidictAy,
	"dict/unidict.az": dictUnidictAz,
	"dict/unidict.ba": dictUnidictBa,
	"dict/unidict.bb": dictUnidictBb,
	"dict/unidict.bc": dictUnidictBc,
	"dict/unidict.bd": dictUnidictBd,
	"dict/unidict.be": dictUnidictBe,
	"dict/unidict.bf": dictUnidictBf,
	"dict/unidict.bg": dictUnidictBg,
	"dict/unidict.bh": dictUnidictBh,
	"dict/unidict.bi": dictUnidictBi,
	"dict/unidict.bj": dictUnidictBj,
	"dict/unidict.bk": dictUnidictBk,
	"dict/unidict.bl": dictUnidictBl,
	"dict/unidict.bm": dictUnidictBm,
	"dict/unidict.bn": dictUnidictBn,
	"dict/unidict.bo": dictUnidictBo,
	"dict/unidict.bp": dictUnidictBp,
	"dict/unidict.bq": dictUnidictBq,
	"dict/unidict.br": dictUnidictBr,
	"dict/unidict.bs": dictUnidictBs,
	"dict/unidict.bt": dictUnidictBt,
	"dict/unidict.bu": dictUnidictBu,
	"dict/unidict.bv": dictUnidictBv,
	"dict/unidict.bw": dictUnidictBw,
	"dict/unidict.bx": dictUnidictBx,
	"dict/unidict.by": dictUnidictBy,
	"dict/unidict.bz": dictUnidictBz,
	"dict/unidict.ca": dictUnidictCa,
	"dict/unidict.cb": dictUnidictCb,
	"dict/unidict.cc": dictUnidictCc,
	"dict/unidict.cd": dictUnidictCd,
	"dict/unidict.ce": dictUnidictCe,
	"dict/unidict.cf": dictUnidictCf,
	"dict/unidict.cg": dictUnidictCg,
	"dict/unidict.ch": dictUnidictCh,
	"dict/unidict.ci": dictUnidictCi,
	"dict/unidict.cj": dictUnidictCj,
	"dict/unidict.ck": dictUnidictCk,
	"dict/unidict.cl": dictUnidictCl,
	"dict/unidict.cm": dictUnidictCm,
	"dict/unidict.cn": dictUnidictCn,
	"dict/unidict.co": dictUnidictCo,
	"dict/unidict.cp": dictUnidictCp,
	"dict/unidict.cq": dictUnidictCq,
	"dict/unidict.cr": dictUnidictCr,
	"dict/unidict.cs": dictUnidictCs,
	"dict/unidict.ct": dictUnidictCt,
	"dict/unidict.cu": dictUnidictCu,
	"dict/unidict.cv": dictUnidictCv,
	"dict/unidict.cw": dictUnidictCw,
	"dict/unidict.cx": dictUnidictCx,
	"dict/unidict.cy": dictUnidictCy,
	"dict/unidict.cz": dictUnidictCz,
	"dict/unidict.da": dictUnidictDa,
	"dict/unidict.db": dictUnidictDb,
	"dict/unidict.dc": dictUnidictDc,
	"dict/unidict.dd": dictUnidictDd,
	"dict/unidict.de": dictUnidictDe,
	"dict/unidict.df": dictUnidictDf,
	"dict/unidict.dg": dictUnidictDg,
	"dict/unidict.dh": dictUnidictDh,
	"dict/unidict.di": dictUnidictDi,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dict": &bintree{nil, map[string]*bintree{
		"unidict.aa": &bintree{dictUnidictAa, map[string]*bintree{}},
		"unidict.ab": &bintree{dictUnidictAb, map[string]*bintree{}},
		"unidict.ac": &bintree{dictUnidictAc, map[string]*bintree{}},
		"unidict.ad": &bintree{dictUnidictAd, map[string]*bintree{}},
		"unidict.ae": &bintree{dictUnidictAe, map[string]*bintree{}},
		"unidict.af": &bintree{dictUnidictAf, map[string]*bintree{}},
		"unidict.ag": &bintree{dictUnidictAg, map[string]*bintree{}},
		"unidict.ah": &bintree{dictUnidictAh, map[string]*bintree{}},
		"unidict.ai": &bintree{dictUnidictAi, map[string]*bintree{}},
		"unidict.aj": &bintree{dictUnidictAj, map[string]*bintree{}},
		"unidict.ak": &bintree{dictUnidictAk, map[string]*bintree{}},
		"unidict.al": &bintree{dictUnidictAl, map[string]*bintree{}},
		"unidict.am": &bintree{dictUnidictAm, map[string]*bintree{}},
		"unidict.an": &bintree{dictUnidictAn, map[string]*bintree{}},
		"unidict.ao": &bintree{dictUnidictAo, map[string]*bintree{}},
		"unidict.ap": &bintree{dictUnidictAp, map[string]*bintree{}},
		"unidict.aq": &bintree{dictUnidictAq, map[string]*bintree{}},
		"unidict.ar": &bintree{dictUnidictAr, map[string]*bintree{}},
		"unidict.as": &bintree{dictUnidictAs, map[string]*bintree{}},
		"unidict.at": &bintree{dictUnidictAt, map[string]*bintree{}},
		"unidict.au": &bintree{dictUnidictAu, map[string]*bintree{}},
		"unidict.av": &bintree{dictUnidictAv, map[string]*bintree{}},
		"unidict.aw": &bintree{dictUnidictAw, map[string]*bintree{}},
		"unidict.ax": &bintree{dictUnidictAx, map[string]*bintree{}},
		"unidict.ay": &bintree{dictUnidictAy, map[string]*bintree{}},
		"unidict.az": &bintree{dictUnidictAz, map[string]*bintree{}},
		"unidict.ba": &bintree{dictUnidictBa, map[string]*bintree{}},
		"unidict.bb": &bintree{dictUnidictBb, map[string]*bintree{}},
		"unidict.bc": &bintree{dictUnidictBc, map[string]*bintree{}},
		"unidict.bd": &bintree{dictUnidictBd, map[string]*bintree{}},
		"unidict.be": &bintree{dictUnidictBe, map[string]*bintree{}},
		"unidict.bf": &bintree{dictUnidictBf, map[string]*bintree{}},
		"unidict.bg": &bintree{dictUnidictBg, map[string]*bintree{}},
		"unidict.bh": &bintree{dictUnidictBh, map[string]*bintree{}},
		"unidict.bi": &bintree{dictUnidictBi, map[string]*bintree{}},
		"unidict.bj": &bintree{dictUnidictBj, map[string]*bintree{}},
		"unidict.bk": &bintree{dictUnidictBk, map[string]*bintree{}},
		"unidict.bl": &bintree{dictUnidictBl, map[string]*bintree{}},
		"unidict.bm": &bintree{dictUnidictBm, map[string]*bintree{}},
		"unidict.bn": &bintree{dictUnidictBn, map[string]*bintree{}},
		"unidict.bo": &bintree{dictUnidictBo, map[string]*bintree{}},
		"unidict.bp": &bintree{dictUnidictBp, map[string]*bintree{}},
		"unidict.bq": &bintree{dictUnidictBq, map[string]*bintree{}},
		"unidict.br": &bintree{dictUnidictBr, map[string]*bintree{}},
		"unidict.bs": &bintree{dictUnidictBs, map[string]*bintree{}},
		"unidict.bt": &bintree{dictUnidictBt, map[string]*bintree{}},
		"unidict.bu": &bintree{dictUnidictBu, map[string]*bintree{}},
		"unidict.bv": &bintree{dictUnidictBv, map[string]*bintree{}},
		"unidict.bw": &bintree{dictUnidictBw, map[string]*bintree{}},
		"unidict.bx": &bintree{dictUnidictBx, map[string]*bintree{}},
		"unidict.by": &bintree{dictUnidictBy, map[string]*bintree{}},
		"unidict.bz": &bintree{dictUnidictBz, map[string]*bintree{}},
		"unidict.ca": &bintree{dictUnidictCa, map[string]*bintree{}},
		"unidict.cb": &bintree{dictUnidictCb, map[string]*bintree{}},
		"unidict.cc": &bintree{dictUnidictCc, map[string]*bintree{}},
		"unidict.cd": &bintree{dictUnidictCd, map[string]*bintree{}},
		"unidict.ce": &bintree{dictUnidictCe, map[string]*bintree{}},
		"unidict.cf": &bintree{dictUnidictCf, map[string]*bintree{}},
		"unidict.cg": &bintree{dictUnidictCg, map[string]*bintree{}},
		"unidict.ch": &bintree{dictUnidictCh, map[string]*bintree{}},
		"unidict.ci": &bintree{dictUnidictCi, map[string]*bintree{}},
		"unidict.cj": &bintree{dictUnidictCj, map[string]*bintree{}},
		"unidict.ck": &bintree{dictUnidictCk, map[string]*bintree{}},
		"unidict.cl": &bintree{dictUnidictCl, map[string]*bintree{}},
		"unidict.cm": &bintree{dictUnidictCm, map[string]*bintree{}},
		"unidict.cn": &bintree{dictUnidictCn, map[string]*bintree{}},
		"unidict.co": &bintree{dictUnidictCo, map[string]*bintree{}},
		"unidict.cp": &bintree{dictUnidictCp, map[string]*bintree{}},
		"unidict.cq": &bintree{dictUnidictCq, map[string]*bintree{}},
		"unidict.cr": &bintree{dictUnidictCr, map[string]*bintree{}},
		"unidict.cs": &bintree{dictUnidictCs, map[string]*bintree{}},
		"unidict.ct": &bintree{dictUnidictCt, map[string]*bintree{}},
		"unidict.cu": &bintree{dictUnidictCu, map[string]*bintree{}},
		"unidict.cv": &bintree{dictUnidictCv, map[string]*bintree{}},
		"unidict.cw": &bintree{dictUnidictCw, map[string]*bintree{}},
		"unidict.cx": &bintree{dictUnidictCx, map[string]*bintree{}},
		"unidict.cy": &bintree{dictUnidictCy, map[string]*bintree{}},
		"unidict.cz": &bintree{dictUnidictCz, map[string]*bintree{}},
		"unidict.da": &bintree{dictUnidictDa, map[string]*bintree{}},
		"unidict.db": &bintree{dictUnidictDb, map[string]*bintree{}},
		"unidict.dc": &bintree{dictUnidictDc, map[string]*bintree{}},
		"unidict.dd": &bintree{dictUnidictDd, map[string]*bintree{}},
		"unidict.de": &bintree{dictUnidictDe, map[string]*bintree{}},
		"unidict.df": &bintree{dictUnidictDf, map[string]*bintree{}},
		"unidict.dg": &bintree{dictUnidictDg, map[string]*bintree{}},
		"unidict.dh": &bintree{dictUnidictDh, map[string]*bintree{}},
		"unidict.di": &bintree{dictUnidictDi, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

